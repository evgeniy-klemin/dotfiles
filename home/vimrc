set nocompatible              " be iMproved, required
filetype off                  " required

"=====================================================
" Vundle settings
"=====================================================
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
"---------=== Code/project navigation ===-------------
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'majutsushi/tagbar'
"--------------=== Color scheme  ===------------------
Bundle 'sickill/vim-monokai'
Bundle 'ryanoasis/vim-devicons'
"--------------=== Snippets support ===---------------
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'
"--------------=== Languages support ===--------------
" --- Python ---
" --- JavaScript ---
Bundle "w0rp/ale"
"---------------=== Helpers ===-----------------------
Bundle 'scrooloose/nerdcommenter'
Bundle 'jpalardy/vim-slime'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
"-----------------=== Syntax ===----------------------
Bundle 'jelera/vim-javascript-syntax'
Bundle 'elzr/vim-json'
Bundle 'vim-less'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'godlygeek/tabular'
Bundle 'plasticboy/vim-markdown'
Bundle 'pearofducks/ansible-vim'
Bundle 'Glench/Vim-Jinja2-Syntax'
Bundle 'mechatroner/rainbow_csv'
"------------------=== Other ===----------------------
Bundle 'localvimrc'
Bundle 'vim-airline/vim-airline'
Bundle 'ycm-core/YouCompleteMe'


"=====================================================
" General settings
"=====================================================
syntax on " enable syntax highlighting
"tabs settings
set ts=4
set sts=4
set sw=4

set autoindent smartindent " auto/smart indent
set expandtab " expand tabs to spaces
set smarttab " tab and backspace are smart

set backspace=indent,eol,start " backspace for dummys
let no_buffers_menu=1
set switchbuf=useopen,usetab

let JSHintUpdateWriteOnly=1


"=====================================================
" Appearance
"=====================================================
set ruler " show the cursor pos
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set completeopt-=preview " don't show docs on the top
set guicursor=a:blinkon0 " Disable all blinking
set cursorline " highlight current line
set ttyfast " Improves redrawing
set scrolloff=5 " always have at least 5 lines before the window's bottom
set number relativenumber

" disable bells
set visualbell t_vb=
set novisualbell

set background=dark
colorscheme monokai

set encoding=UTF-8
set number "nu - Line numbers on

" highlight more the 88 columns
augroup vimrc_autocmds
    autocmd!
    autocmd FileType python,javascript highlight OverLength ctermfg=red
    autocmd FileType python,javascript match OverLength /\%88v.\+/
    autocmd FileType python,javascript set nowrap
    autocmd FileType javascript,js highlight SpellBad cterm=bold ctermbg=0
augroup END

let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_meaningful_tab_names = 1
let g:nerdtree_tabs_focus_on_files = 1
let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$']

au BufRead,BufNewFile *.html set filetype=htmldjango

let g:jedi#popup_select_first = 0 " Disable choose first function/method at autocomplete

" highlight extra whitespaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"=====================================================
" Search & Replace
"=====================================================
set hlsearch " highlight searches
set ignorecase " make searches case-insensitive, unless they contain upper-case letters:
set smartcase
set incsearch " show the `best match so far' as search strings are typed:

"=====================================================
" GUI Stuff
"=====================================================
set mousemodel=extend " Enable mouse support
"set selectmode=mouse
set mousefocus
set mouse=c
set timeoutlen=300

"=====================================================
" Backup options
"=====================================================
set backupdir=~/tmp,/tmp " backups (~)
set directory=~/tmp,/tmp " swap files
set backup               " enable backups

"smart ident
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

"trim trailing whitespace
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

"filetype on
"filetype plugin on
filetype plugin indent on

set showcmd " show partial commands in status line and
set laststatus=1
set showmatch " show matching brackets/parenthesis
set shortmess+=filmnrxoOtT " abbrev. of messages (avoids 'hit enter')


"=====================================================
" Aireline
"=====================================================
let g:airline_powerline_fonts = 1 "enable powerline fonts support
let g:airline#extensions#keymap#enabled = 0 "dont show current mapping
let g:airline_section_z = "\ue0a1:%l/%L Col:%c" "custom cursor section
let g:Powerline_symbols='unicode' "unicode support
let g:airline#extensions#xkblayout#enabled = 0
"let g:airline#extensions#tabline#enabled = 0
"let g:airline#extensions#tabline#formatter = 'unique_tail'
set noshowmode


"=====================================================
" Key mapping
"=====================================================
map <F7> :set number!<CR>

" add new line before or after cursor
nmap oo o<Esc>k
nmap OO O<Esc>j

map <C-n> :NERDTreeTabsToggle<CR>
nmap <S-t> :TagbarToggle<CR>
" go to file in NERDTree
nmap f :NERDTreeFind<CR>

" Autoformat
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" autocompleate <Ctrl+Space>
inoremap <C-space> <C-x><C-o>

" Save as sudo
cmap w!! w !sudo tee % >/dev/null

" Copy and past word, using buffer 1
nmap yw viw"1y
nmap pw viw"1p
" Copy and past visual selection using buffer 1
vnoremap y "1y
vnoremap p "1p

" tab navigation
nmap <S-h> :tabprevious<CR>
nmap <S-l> :tabnext<CR>

" remap Ex mode to exit
nmap <S-q> :q<CR>

"=====================================================
" Auto paste detect
"=====================================================
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

"=====================================================
" Plugins
"=====================================================
let g:slime_target = "tmux"
let g:ale_linters = {
\    'python': ['flake8'],
\    'javascript': ['eslint'],
\}
let g:ale_fixers = {
\    'python': ['black', 'isort', 'remove_trailing_lines', 'trim_whitespace'],
\    'javascript': ['eslint'],
\}
let g:ale_fix_on_save = 1
let g:airline#extensions#ale#enabled = 1

let g:rcsv_delimiters = [","]
"let g:disable_rainbow_csv_autodetect = 1

map ё `
map й q
map ц w
map у e
map к r
map е t
map н y
map г u
map ш i
map щ o
map з p
map х [
map ъ ]
map ф a
map ы s
map в d
map а f
map п g
map р h
map о j
map л k
map д l
map ж ;
map э '
map я z
map ч x
map с c
map м v
map и b
map т n
map ь m
map б ,
map ю .
map . /

map Ё ~
map Й Q
map Ц W
map У E
map К R
map Е T
map Н Y
map Г U
map Ш I
map Щ O
map З P
map Х {
map Ъ }
map Ф A
map Ы S
map В D
map А F
map П G
map Р H
map О J
map Л K
map Д L
map Ж :
map Э "
map Я Z
map Ч X
map С C
map М V
map И B
map Т N
map Ь M
map Б <
map Ю >
map , ?

let g:localvimrc_ask=0
